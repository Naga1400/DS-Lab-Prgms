#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
    struct node* prev;
};

struct node* head = NULL;

void create() {
    struct node *newnode, *temp;
    head = NULL;
    int choice = 1;

    while (choice) {
        newnode = (struct node*)malloc(sizeof(struct node));
        printf("Enter the data: ");
        scanf("%d", &newnode->data);

        newnode->next = NULL;
        newnode->prev = NULL;

        if (head == NULL) {
            head = temp = newnode;
        } else {
            temp->next = newnode;
            newnode->prev = temp;
            temp = newnode;
        }

        printf("Do you want to continue (type 0 or 1)? ");
        scanf("%d", &choice);
    }
}

void insertLeft(int value, int newValue) {
    struct node* temp = head;
    struct node* newnode;

    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }

    newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = newValue;
    newnode->next = temp;
    newnode->prev = temp->prev;

    if (temp->prev != NULL) {
        temp->prev->next = newnode;
    } else {
        head = newnode;
    }
    temp->prev = newnode;
}

void deleteNode(int value) {
    struct node* temp = head;

    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }

    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {
        head = temp->next;
    }

    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    free(temp);
    printf("Node with value %d deleted.\n", value);
}

void display() {
    struct node* temp = head;
    printf("Items in linked list are: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice, value, newValue;

    do {
        printf("\n1. Create doubly linked list");
        printf("\n2. Insert a new node to the left of a node");
        printf("\n3. Delete a node based on value");
        printf("\n4. Display the list");
        printf("\n5. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                create();
                break;
            case 2:
                printf("Enter the value of the node to insert left of: ");
                scanf("%d", &value);
                printf("Enter the new value to insert: ");
                scanf("%d", &newValue);
                insertLeft(value, newValue);
                break;
            case 3:
                printf("Enter the value of the node to delete: ");
                scanf("%d", &value);
                deleteNode(value);
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 5);

    return 0;
}
